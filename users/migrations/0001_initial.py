# Generated by Django 5.1 on 2024-08-10 12:59

import datetime
import django.utils.timezone
import users.models
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "password",
                    models.CharField(max_length=128, verbose_name="password"),
                ),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        verbose_name="date joined",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        blank=True,
                        max_length=150,
                        null=True,
                        verbose_name="username",
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        max_length=254,
                        unique=True,
                        verbose_name="email address",
                    ),
                ),
                (
                    "birth_date",
                    models.DateField(
                        blank=True,
                        db_comment="Date of birth of the user.",
                        help_text="Date of birth of the user.",
                        null=True,
                    ),
                ),
                (
                    "photo",
                    models.ImageField(
                        blank=True,
                        db_comment="Photo of the user.",
                        help_text="Photo of the user.",
                        null=True,
                        upload_to=users.models.create_custom_path_for_photo,
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "ordering": ["date_joined"],
                "indexes": [
                    models.Index(
                        fields=["username"],
                        name="users_user_usernam_65d164_idx",
                    ),
                    models.Index(
                        fields=["last_name", "first_name"],
                        name="users_user_last_na_be362d_idx",
                    ),
                    models.Index(
                        fields=["email"], name="users_user_email_6f2530_idx"
                    ),
                ],
                "constraints": [
                    models.UniqueConstraint(
                        condition=models.Q(("username__isnull", False)),
                        fields=("username",),
                        name="unique_username",
                        violation_error_message="A user with that username already exists.",
                    ),
                    models.CheckConstraint(
                        condition=models.Q(
                            ("birth_date__isnull", True),
                            models.Q(
                                (
                                    "birth_date__lte",
                                    datetime.date(2011, 8, 14),
                                ),
                                ("birth_date__gte", datetime.date(1924, 9, 4)),
                            ),
                            _connector="OR",
                        ),
                        name="check_age",
                        violation_error_message="User must be at least 13 years old and less than 100 years old.",
                    ),
                ],
            },
            managers=[
                ("objects", users.models.UserManager()),
            ],
        ),
    ]
